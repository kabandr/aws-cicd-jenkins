pipeline {
    agent any // Use dynamic agents

    parameters {
        string(name: 'AWS_REGION', defaultValue: 'us-west-2', description: 'AWS Region for services')
        string(name: 'ECR_REGISTRY', defaultValue: 'public.ecr.aws/r3s7h5z7/products-app', description: 'ECR Registry URL')
    }

    environment {
        PATH = "${tool 'NodeJS'}/bin:${env.PATH}"
        // Using parameters for AWS_REGION and ECR_REGISTRY now
        FRONTEND_DOCKER_IMAGE = "${params.ECR_REGISTRY}/frontend:${env.GIT_COMMIT}"
        BACKEND_DOCKER_IMAGE = "${params.ECR_REGISTRY}/backend:${env.GIT_COMMIT}"
    }

    stages {
        stage('Prepare') {
            agent any
            steps {
                script {
                    // Clean workspace at the beginning of the pipeline
                    deleteDir()
                }
                checkout scm
            }
        }

        stage('Build and Test') {
            parallel {
                stage('Build Frontend') {
                    agent { label 'nodejs' }
                    steps {
                        dir('frontend') {
                            script {
                                sh 'npm install'
                                sh 'npm run build'
                            }
                        }
                    }
                }

                stage('Build Backend') {
                    agent { label 'nodejs' }
                    steps {
                        dir('backend') {
                            script {
                                sh 'npm install'
                            }
                        }
                    }
                }

                stage('Unit Tests') {
                    agent { label 'nodejs' }
                    steps {
                        script {
                            parallel {
                                stage('Frontend Tests') {
                                    dir('frontend') {
                                        sh 'npm test'
                                }
                            }
                                stage('Backend Tests') {
                                    dir('backend') {
                                        sh 'npm test'
                                }
                            }
                        }

                    }    
                }
            }

                stage('Static Code Analysis') {
                    agent { label 'nodejs' }
                    steps {
                        script {
                            parallel {
                                stage('Frontend Lint') {
                                    dir('frontend') {
                                        sh 'npm run lint'
                                        }
                                    }
                                stage('Backend Lint') {
                                    dir('backend') {
                                        sh 'npm run lint'
                                        }
                                    }
                                }
                            }                      
                        }
                    }
                }
            }

        stage('Dockerize and Publish') {
            parallel {
                stage('Frontend Docker Image') {
                    agent any
                    steps {
                        script {
                            // Use Jenkins credentials to authenticate Docker
                            withDockerRegistry(credentialsId: 'ecr-credentials-id', url: "${params.ECR_REGISTRY}") {
                                dir('frontend') {
                                    sh "docker build -t ${env.FRONTEND_DOCKER_IMAGE} ."
                                    sh "docker push ${env.FRONTEND_DOCKER_IMAGE}"
                                }
                            }
                        }
                    }
                }

                stage('Backend Docker Image') {
                    agent any
                    steps {
                        script {
                            // Use Jenkins credentials to authenticate Docker
                            withDockerRegistry(credentialsId: 'ecr-credentials-id', url: "${params.ECR_REGISTRY}") {
                                dir('backend') {
                                    sh "docker build -t ${env.BACKEND_DOCKER_IMAGE} ."
                                    sh "docker push ${env.BACKEND_DOCKER_IMAGE}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Security Scanning') {
            agent any
            steps {
                script {
                    // Assume Trivy is pre-installed on the agent or use a global tool configuration
                    // Scan the frontend Docker image
                    sh "trivy --severity HIGH,CRITICAL --no-progress --exit-code 1 ${env.FRONTEND_DOCKER_IMAGE}"

                    // Scan the backend Docker image
                    sh "trivy --severity HIGH,CRITICAL --no-progress --exit-code 1 ${env.BACKEND_DOCKER_IMAGE}"
                }
            }
        }

        stage('Deploy to Staging') {
            agent any
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    withKubeConfig(credentialsId: 'kubeconfig-credentials-id') {
                        sh 'kubectl apply -f k8s/staging-frontend-deployment.yaml'
                        sh 'kubectl apply -f k8s/staging-backend-deployment.yaml'
                        // Add post-deployment verification if necessary
                    }
                }
            }
        }

        stage('Promotion to Production') {
            agent any
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                input 'Deploy to Production?'
                script {
                    withKubeConfig(credentialsId: 'kubeconfig-credentials-id') {
                        sh 'kubectl apply -f k8s/production-frontend-deployment.yaml'
                        sh 'kubectl apply -f k8s/production-backend-deployment.yaml'
                    }
                }
            }
        }
    }

    post {
        always {
            node("") {
                // Generate and archive artifacts
                archiveArtifacts artifacts: 'frontend/build/**,backend/build/**', allowEmptyArchive: true
                junit '**/test-results/*.xml'
                cleanWs() // Clean the workspace when the pipeline is finished
            }
        }

        success {
            script {
                node {
                    // Send notifications with more context
                    sh 'send-notification.sh "Success: Build ${env.BUILD_NUMBER} (${env.GIT_COMMIT}) - ${env.BUILD_URL}"'
                }
            }
        }

        failure {
            script {
                node {
                    // Send notifications and consider automated rollback if necessary
                    sh 'send-notification.sh "Failure: Build ${env.BUILD_NUMBER} (${env.GIT_COMMIT}) - ${env.BUILD_URL}"'
                    // Rollback command can be here if needed
                }
            }
        }
    }
}
